@startuml

abstract class InputStream {
  +abstract read():int
  +read(byte[] b):int
  +read(byte[] b, int off, int len):int
  +skip(long n):long
  +avaliable():int
  +close()
  +mark(int readlimit)
  +reset()
  +markSupported():boolean
}
class FileInputStream {
  +read():int
  +getFD():FileDescriptor
  +getChannel():FileChannel
  -finalize()
}
class StringBufferInputStream{
  -String buffer
  -int pos
  -int count
  +read():int 
}
class ByteArrayInputStream{
  -byte[] buf
  -int count
  -int mark
  -int pos
  +read():int 
}
class FilterInputStream{
  -inputStream in
  +read():int 
}
class PushBackInputStream{
  -byte[] buf
  -int pos
  +read():int
  +unread(int b)
  +unread(byte[] b, int off, int len)
  +unread(byte[] b)
}
class BufferedInputStream{
  -byte[] buf
  -int count
  -int marklimit
  -int markpos
  -int pos
  +read():int 
}
class DataInputStream{
  +read():int
  +readFully(byte[] b)
  +readFully(byte[] b, int off, int len)
  +skipBytes(int n):int
  +readBoolean():boolean
  +readByte():byte
  +readUnsignedByte():int
  +readShort():short
  +readUnsignedShort():short
  +readChar():char
  +readInt():int
  +readLong():long
  +readFloat():float
  +readDouble():double
  +readLine():String
  +readUTF():String
  +readUTF(DataInput in):String
}
class LineNumberInputStream{
  +read():int
  +setLineNumber(int lineNumber)
  +getLineNumber():int
  
}

InputStream <|-- FileInputStream
InputStream <|-- StringBufferInputStream
InputStream <|-- ByteArrayInputStream
InputStream <|-- FilterInputStream
FilterInputStream <|-- PushBackInputStream
FilterInputStream <|-- BufferedInputStream
FilterInputStream <|-- DataInputStream
FilterInputStream <|-- LineNumberInputStream

@enduml